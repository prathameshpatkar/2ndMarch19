**********************
Windows PowerShell transcript start
Start time: 20190330110401
Username: NTMS_PC8\Administrator
RunAs User: NTMS_PC8\Administrator
Machine: NTMS_PC8 (Microsoft Windows NT 6.3.9600.0)
Host Application: C:\Windows\System32\WindowsPowerShell\v1.0\powershell_ise.exe
Process ID: 5640
PSVersion: 5.1.14409.1018
PSEdition: Desktop
PSCompatibleVersions: 1.0, 2.0, 3.0, 4.0, 5.0, 5.1.14409.1018
BuildVersion: 10.0.14409.1018
CLRVersion: 4.0.30319.42000
WSManStackVersion: 3.0
PSRemotingProtocolVersion: 2.3
SerializationVersion: 1.1.0.1
**********************
Transcript started, output file is C:\Users\Administrator\Documents\PowerShell_transcript.NTMS_PC8.ypF0s8U5.20190330110401.txt
PS C:\Windows\system32> "1" | Get-Member


   TypeName: System.String

Name             MemberType            Definition
----             ----------            ----------
Clone            Method                System.Object Clone(), System.Object ICloneable.Clone()
CompareTo        Method                int CompareTo(System.Object value), int CompareTo(string strB), int IComparable.CompareTo(System.Object obj), int IComparable[string].CompareTo(string other)
Contains         Method                bool Contains(string value)
CopyTo           Method                void CopyTo(int sourceIndex, char[] destination, int destinationIndex, int count)
EndsWith         Method                bool EndsWith(string value), bool EndsWith(string value, System.StringComparison comparisonType), bool EndsWith(string value, bool ignoreCase, cultureinfo culture)
Equals           Method                bool Equals(System.Object obj), bool Equals(string value), bool Equals(string value, System.StringComparison comparisonType), bool IEquatable[string].Equals(string other)
GetEnumerator    Method                System.CharEnumerator GetEnumerator(), System.Collections.IEnumerator IEnumerable.GetEnumerator(), System.Collections.Generic.IEnumerator[char] IEnumerable[char].GetEnumer...
GetHashCode      Method                int GetHashCode()
GetType          Method                type GetType()
GetTypeCode      Method                System.TypeCode GetTypeCode(), System.TypeCode IConvertible.GetTypeCode()
IndexOf          Method                int IndexOf(char value), int IndexOf(char value, int startIndex), int IndexOf(char value, int startIndex, int count), int IndexOf(string value), int IndexOf(string value, ...
IndexOfAny       Method                int IndexOfAny(char[] anyOf), int IndexOfAny(char[] anyOf, int startIndex), int IndexOfAny(char[] anyOf, int startIndex, int count)
Insert           Method                string Insert(int startIndex, string value)
IsNormalized     Method                bool IsNormalized(), bool IsNormalized(System.Text.NormalizationForm normalizationForm)
LastIndexOf      Method                int LastIndexOf(char value), int LastIndexOf(char value, int startIndex), int LastIndexOf(char value, int startIndex, int count), int LastIndexOf(string value), int LastIn...
LastIndexOfAny   Method                int LastIndexOfAny(char[] anyOf), int LastIndexOfAny(char[] anyOf, int startIndex), int LastIndexOfAny(char[] anyOf, int startIndex, int count)
Normalize        Method                string Normalize(), string Normalize(System.Text.NormalizationForm normalizationForm)
PadLeft          Method                string PadLeft(int totalWidth), string PadLeft(int totalWidth, char paddingChar)
PadRight         Method                string PadRight(int totalWidth), string PadRight(int totalWidth, char paddingChar)
Remove           Method                string Remove(int startIndex, int count), string Remove(int startIndex)
Replace          Method                string Replace(char oldChar, char newChar), string Replace(string oldValue, string newValue)
Split            Method                string[] Split(Params char[] separator), string[] Split(char[] separator, int count), string[] Split(char[] separator, System.StringSplitOptions options), string[] Split(c...
StartsWith       Method                bool StartsWith(string value), bool StartsWith(string value, System.StringComparison comparisonType), bool StartsWith(string value, bool ignoreCase, cultureinfo culture)
Substring        Method                string Substring(int startIndex), string Substring(int startIndex, int length)
ToBoolean        Method                bool IConvertible.ToBoolean(System.IFormatProvider provider)
ToByte           Method                byte IConvertible.ToByte(System.IFormatProvider provider)
ToChar           Method                char IConvertible.ToChar(System.IFormatProvider provider)
ToCharArray      Method                char[] ToCharArray(), char[] ToCharArray(int startIndex, int length)
ToDateTime       Method                datetime IConvertible.ToDateTime(System.IFormatProvider provider)
ToDecimal        Method                decimal IConvertible.ToDecimal(System.IFormatProvider provider)
ToDouble         Method                double IConvertible.ToDouble(System.IFormatProvider provider)
ToInt16          Method                int16 IConvertible.ToInt16(System.IFormatProvider provider)
ToInt32          Method                int IConvertible.ToInt32(System.IFormatProvider provider)
ToInt64          Method                long IConvertible.ToInt64(System.IFormatProvider provider)
ToLower          Method                string ToLower(), string ToLower(cultureinfo culture)
ToLowerInvariant Method                string ToLowerInvariant()
ToSByte          Method                sbyte IConvertible.ToSByte(System.IFormatProvider provider)
ToSingle         Method                float IConvertible.ToSingle(System.IFormatProvider provider)
ToString         Method                string ToString(), string ToString(System.IFormatProvider provider), string IConvertible.ToString(System.IFormatProvider provider)
ToType           Method                System.Object IConvertible.ToType(type conversionType, System.IFormatProvider provider)
ToUInt16         Method                uint16 IConvertible.ToUInt16(System.IFormatProvider provider)
ToUInt32         Method                uint32 IConvertible.ToUInt32(System.IFormatProvider provider)
ToUInt64         Method                uint64 IConvertible.ToUInt64(System.IFormatProvider provider)
ToUpper          Method                string ToUpper(), string ToUpper(cultureinfo culture)
ToUpperInvariant Method                string ToUpperInvariant()
Trim             Method                string Trim(Params char[] trimChars), string Trim()
TrimEnd          Method                string TrimEnd(Params char[] trimChars)
TrimStart        Method                string TrimStart(Params char[] trimChars)
Chars            ParameterizedProperty char Chars(int index) {get;}
Length           Property              int Length {get;}


PS C:\Windows\system32> $p= "1"
PS C:\Windows\system32> $p= "abc"
PS C:\Windows\system32> $p.Chars(2)
c
PS C:\Windows\system32> Get-Help export-csv -online
PS C:\Windows\system32> $mycsv=Import-Csv -path "C:\input.csv"
PS C:\Windows\system32> $mycsv | Get-Member


   TypeName: System.Management.Automation.PSCustomObject

Name        MemberType   Definition
----        ----------   ----------
Equals      Method       bool Equals(System.Object obj)
GetHashCode Method       int GetHashCode()
GetType     Method       type GetType()
ToString    Method       string ToString()
firstname   NoteProperty string firstname=prathamesh
lastname    NoteProperty string lastname=Patkar


PS C:\Windows\system32> $mycsv.IndexOf(1)
-1
PS C:\Windows\system32> $mycsv

firstname  lastname
---------  --------
prathamesh Patkar
abc        xyz
sanjay     pawar


PS C:\Windows\system32> $mycsv
foreach($user in $mycsv)
{

$samname="$($mycsv.firstname).chars[0] + $($mycsv.lastname)"
select "$mycsv.firstname, $mycsv.lastname,$samname" | export-csv -path "C:\sam.csv"
}

firstname  lastname
---------  --------
prathamesh Patkar
abc        xyz
sanjay     pawar


PS C:\Windows\system32> $samname
prathamesh abc sanjay.chars[0] + Patkar xyz pawar
PS C:\Windows\system32> foreach($user in $mycsv)
{

$samname="$($mycsv.firstname).chars[0] + $($mycsv.lastname)"
select "$mycsv.firstname, $mycsv.lastname,$samname" | export-csv -path "C:\sam.csv" -Append
}
PS C:\Windows\system32> $samname
prathamesh abc sanjay.chars[0] + Patkar xyz pawar
PS C:\Windows\system32> foreach($user in $mycsv)
{

$samname="$($user.firstname).chars[0] + $($user.lastname)"
select "$user.firstname, $user.lastname,$samname" | export-csv -path "C:\sam.csv" -Append
}
PS C:\Windows\system32> $samname
sanjay.chars[0] + pawar
PS C:\Windows\system32> $samname
sanjay.chars[0] + pawar
PS C:\Windows\system32> foreach($user in $mycsv)
{

$samname="$($user.firstname).chars[0] + $($user.lastname)"
select "$user.firstname, $user.lastname,$samname" | export-csv -path "C:\sam.csv" -Append
$samname
}
>> TerminatingError(Export-Csv): "The process cannot access the file 'C:\sam.csv' because it is being used by another process."
export-csv : The process cannot access the file 'C:\sam.csv' because it is being used by another process.
At line:5 char:53
+ ... ame, $user.lastname,$samname" | export-csv -path "C:\sam.csv" -Append
+                                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : OpenError: (:) [Export-Csv], IOException
    + FullyQualifiedErrorId : FileOpenFailure,Microsoft.PowerShell.Commands.ExportCsvCommand
export-csv : The process cannot access the file 'C:\sam.csv' because it is being used by another process.
At line:5 char:53
+ ... ame, $user.lastname,$samname" | export-csv -path "C:\sam.csv" -Append
+                                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : OpenError: (:) [Export-Csv], IOException
    + FullyQualifiedErrorId : FileOpenFailure,Microsoft.PowerShell.Commands.ExportCsvCommand

prathamesh.chars[0] + Patkar
>> TerminatingError(Export-Csv): "The process cannot access the file 'C:\sam.csv' because it is being used by another process."
export-csv : The process cannot access the file 'C:\sam.csv' because it is being used by another process.
At line:5 char:53
+ ... ame, $user.lastname,$samname" | export-csv -path "C:\sam.csv" -Append
+                                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : OpenError: (:) [Export-Csv], IOException
    + FullyQualifiedErrorId : FileOpenFailure,Microsoft.PowerShell.Commands.ExportCsvCommand
export-csv : The process cannot access the file 'C:\sam.csv' because it is being used by another process.
At line:5 char:53
+ ... ame, $user.lastname,$samname" | export-csv -path "C:\sam.csv" -Append
+                                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : OpenError: (:) [Export-Csv], IOException
    + FullyQualifiedErrorId : FileOpenFailure,Microsoft.PowerShell.Commands.ExportCsvCommand

abc.chars[0] + xyz
>> TerminatingError(Export-Csv): "The process cannot access the file 'C:\sam.csv' because it is being used by another process."
export-csv : The process cannot access the file 'C:\sam.csv' because it is being used by another process.
At line:5 char:53
+ ... ame, $user.lastname,$samname" | export-csv -path "C:\sam.csv" -Append
+                                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : OpenError: (:) [Export-Csv], IOException
    + FullyQualifiedErrorId : FileOpenFailure,Microsoft.PowerShell.Commands.ExportCsvCommand
export-csv : The process cannot access the file 'C:\sam.csv' because it is being used by another process.
At line:5 char:53
+ ... ame, $user.lastname,$samname" | export-csv -path "C:\sam.csv" -Append
+                                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : OpenError: (:) [Export-Csv], IOException
    + FullyQualifiedErrorId : FileOpenFailure,Microsoft.PowerShell.Commands.ExportCsvCommand

sanjay.chars[0] + pawar
PS C:\Windows\system32> foreach($user in $mycsv)
{

$samname="$($user.firstname).chars(0) + $($user.lastname)"
select "$user.firstname, $user.lastname,$samname" | export-csv -path "C:\sam.csv" -Append

}
>> TerminatingError(Export-Csv): "The process cannot access the file 'C:\sam.csv' because it is being used by another process."
export-csv : The process cannot access the file 'C:\sam.csv' because it is being used by another process.
At line:5 char:53
+ ... ame, $user.lastname,$samname" | export-csv -path "C:\sam.csv" -Append
+                                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : OpenError: (:) [Export-Csv], IOException
    + FullyQualifiedErrorId : FileOpenFailure,Microsoft.PowerShell.Commands.ExportCsvCommand
export-csv : The process cannot access the file 'C:\sam.csv' because it is being used by another process.
At line:5 char:53
+ ... ame, $user.lastname,$samname" | export-csv -path "C:\sam.csv" -Append
+                                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : OpenError: (:) [Export-Csv], IOException
    + FullyQualifiedErrorId : FileOpenFailure,Microsoft.PowerShell.Commands.ExportCsvCommand

>> TerminatingError(Export-Csv): "The process cannot access the file 'C:\sam.csv' because it is being used by another process."
export-csv : The process cannot access the file 'C:\sam.csv' because it is being used by another process.
At line:5 char:53
+ ... ame, $user.lastname,$samname" | export-csv -path "C:\sam.csv" -Append
+                                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : OpenError: (:) [Export-Csv], IOException
    + FullyQualifiedErrorId : FileOpenFailure,Microsoft.PowerShell.Commands.ExportCsvCommand
export-csv : The process cannot access the file 'C:\sam.csv' because it is being used by another process.
At line:5 char:53
+ ... ame, $user.lastname,$samname" | export-csv -path "C:\sam.csv" -Append
+                                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : OpenError: (:) [Export-Csv], IOException
    + FullyQualifiedErrorId : FileOpenFailure,Microsoft.PowerShell.Commands.ExportCsvCommand

>> TerminatingError(Export-Csv): "The process cannot access the file 'C:\sam.csv' because it is being used by another process."
export-csv : The process cannot access the file 'C:\sam.csv' because it is being used by another process.
At line:5 char:53
+ ... ame, $user.lastname,$samname" | export-csv -path "C:\sam.csv" -Append
+                                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : OpenError: (:) [Export-Csv], IOException
    + FullyQualifiedErrorId : FileOpenFailure,Microsoft.PowerShell.Commands.ExportCsvCommand
export-csv : The process cannot access the file 'C:\sam.csv' because it is being used by another process.
At line:5 char:53
+ ... ame, $user.lastname,$samname" | export-csv -path "C:\sam.csv" -Append
+                                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : OpenError: (:) [Export-Csv], IOException
    + FullyQualifiedErrorId : FileOpenFailure,Microsoft.PowerShell.Commands.ExportCsvCommand

PS C:\Windows\system32> foreach($user in $mycsv)
{

$samname="$($user.firstname).chars(0) + $($user.lastname)"
select "$user.firstname, $user.lastname,$samname" | export-csv -path "C:\sam.csv" -Append

}
>> TerminatingError(Export-Csv): "The process cannot access the file 'C:\sam.csv' because it is being used by another process."
export-csv : The process cannot access the file 'C:\sam.csv' because it is being used by another process.
At line:5 char:53
+ ... ame, $user.lastname,$samname" | export-csv -path "C:\sam.csv" -Append
+                                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : OpenError: (:) [Export-Csv], IOException
    + FullyQualifiedErrorId : FileOpenFailure,Microsoft.PowerShell.Commands.ExportCsvCommand
export-csv : The process cannot access the file 'C:\sam.csv' because it is being used by another process.
At line:5 char:53
+ ... ame, $user.lastname,$samname" | export-csv -path "C:\sam.csv" -Append
+                                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : OpenError: (:) [Export-Csv], IOException
    + FullyQualifiedErrorId : FileOpenFailure,Microsoft.PowerShell.Commands.ExportCsvCommand

>> TerminatingError(Export-Csv): "The process cannot access the file 'C:\sam.csv' because it is being used by another process."
export-csv : The process cannot access the file 'C:\sam.csv' because it is being used by another process.
At line:5 char:53
+ ... ame, $user.lastname,$samname" | export-csv -path "C:\sam.csv" -Append
+                                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : OpenError: (:) [Export-Csv], IOException
    + FullyQualifiedErrorId : FileOpenFailure,Microsoft.PowerShell.Commands.ExportCsvCommand
export-csv : The process cannot access the file 'C:\sam.csv' because it is being used by another process.
At line:5 char:53
+ ... ame, $user.lastname,$samname" | export-csv -path "C:\sam.csv" -Append
+                                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : OpenError: (:) [Export-Csv], IOException
    + FullyQualifiedErrorId : FileOpenFailure,Microsoft.PowerShell.Commands.ExportCsvCommand

>> TerminatingError(Export-Csv): "The process cannot access the file 'C:\sam.csv' because it is being used by another process."
export-csv : The process cannot access the file 'C:\sam.csv' because it is being used by another process.
At line:5 char:53
+ ... ame, $user.lastname,$samname" | export-csv -path "C:\sam.csv" -Append
+                                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : OpenError: (:) [Export-Csv], IOException
    + FullyQualifiedErrorId : FileOpenFailure,Microsoft.PowerShell.Commands.ExportCsvCommand
export-csv : The process cannot access the file 'C:\sam.csv' because it is being used by another process.
At line:5 char:53
+ ... ame, $user.lastname,$samname" | export-csv -path "C:\sam.csv" -Append
+                                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : OpenError: (:) [Export-Csv], IOException
    + FullyQualifiedErrorId : FileOpenFailure,Microsoft.PowerShell.Commands.ExportCsvCommand

PS C:\Windows\system32> foreach($user in $mycsv)
{

$samname="$($user.firstname).chars(0) + $($user.lastname)"
"$user.firstname, $user.lastname,$samname" | export-csv -path "C:\sam.csv" -Append

}
>> TerminatingError(Export-Csv): "The process cannot access the file 'C:\sam.csv' because it is being used by another process."
export-csv : The process cannot access the file 'C:\sam.csv' because it is being used by another process.
At line:5 char:46
+ ... ame, $user.lastname,$samname" | export-csv -path "C:\sam.csv" -Append
+                                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : OpenError: (:) [Export-Csv], IOException
    + FullyQualifiedErrorId : FileOpenFailure,Microsoft.PowerShell.Commands.ExportCsvCommand
export-csv : The process cannot access the file 'C:\sam.csv' because it is being used by another process.
At line:5 char:46
+ ... ame, $user.lastname,$samname" | export-csv -path "C:\sam.csv" -Append
+                                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : OpenError: (:) [Export-Csv], IOException
    + FullyQualifiedErrorId : FileOpenFailure,Microsoft.PowerShell.Commands.ExportCsvCommand

>> TerminatingError(Export-Csv): "The process cannot access the file 'C:\sam.csv' because it is being used by another process."
export-csv : The process cannot access the file 'C:\sam.csv' because it is being used by another process.
At line:5 char:46
+ ... ame, $user.lastname,$samname" | export-csv -path "C:\sam.csv" -Append
+                                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : OpenError: (:) [Export-Csv], IOException
    + FullyQualifiedErrorId : FileOpenFailure,Microsoft.PowerShell.Commands.ExportCsvCommand
export-csv : The process cannot access the file 'C:\sam.csv' because it is being used by another process.
At line:5 char:46
+ ... ame, $user.lastname,$samname" | export-csv -path "C:\sam.csv" -Append
+                                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : OpenError: (:) [Export-Csv], IOException
    + FullyQualifiedErrorId : FileOpenFailure,Microsoft.PowerShell.Commands.ExportCsvCommand

>> TerminatingError(Export-Csv): "The process cannot access the file 'C:\sam.csv' because it is being used by another process."
export-csv : The process cannot access the file 'C:\sam.csv' because it is being used by another process.
At line:5 char:46
+ ... ame, $user.lastname,$samname" | export-csv -path "C:\sam.csv" -Append
+                                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : OpenError: (:) [Export-Csv], IOException
    + FullyQualifiedErrorId : FileOpenFailure,Microsoft.PowerShell.Commands.ExportCsvCommand
export-csv : The process cannot access the file 'C:\sam.csv' because it is being used by another process.
At line:5 char:46
+ ... ame, $user.lastname,$samname" | export-csv -path "C:\sam.csv" -Append
+                                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : OpenError: (:) [Export-Csv], IOException
    + FullyQualifiedErrorId : FileOpenFailure,Microsoft.PowerShell.Commands.ExportCsvCommand

PS C:\Windows\system32> foreach($user in $mycsv)
{

$samname="$($user.firstname).chars(0) + $($user.lastname)"
"$user.firstname, $user.lastname,$samname" | export-csv -path "C:\sam.csv" -Append

}
PS C:\Windows\system32> $samname
sanjay.chars(0) + pawar
PS C:\Windows\system32> foreach($user in $mycsv)
{

$samname="$($($user.firstname).chars(0))$($user.lastname)"
"$user.firstname, $user.lastname,$samname" | export-csv -path "C:\sam.csv" -Append

}
PS C:\Windows\system32> foreach($user in $mycsv)
{

$samname="$($($user.firstname).chars(0))$($user.lastname)"
"$user.firstname, $user.lastname,$samname" | export-csv -path "C:\sam.csv" -Append

}
PS C:\Windows\system32> foreach($user in $mycsv)
{

$samname="$($($user.firstname).chars(0))$($user.lastname)"
"$user.firstname, $user.lastname,$samname" | export-csv -path "C:\sam.csv" -Append

}
PS C:\Windows\system32> foreach($user in $mycsv)
{

$samname="$($($user.firstname).chars(0))$($user.lastname)"
"$user.firstname, $user.lastname,$samname" | export-csv -path "C:\sam.csv" -Append
$samname
}
pPatkar
axyz
spawar
PS C:\Windows\system32> foreach($user in $mycsv)
{

$samname="$($($user.firstname).chars(0))$($user.lastname)"
$myhash=[pscustomobject]@{fname=$user.firstname;lname=$user.lastname;samaccountname=$samname}
$myhash | export-csv -path "C:\sam.csv" -Append
}
>> TerminatingError(Export-Csv): "Cannot append CSV content to the following file: C:\sam.csv. The appended object does not have a property that corresponds to the following column: Length. To continue with mismatched properties, add the -Force parameter, and then retry the command."
export-csv : Cannot append CSV content to the following file: C:\sam.csv. The appended object does not have a property 
that corresponds to the following column: Length. To continue with mismatched properties, add the -Force parameter, and 
then retry the command.
At line:6 char:11
+ $myhash | export-csv -path "C:\sam.csv" -Append
+           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidData: (Length:String) [Export-Csv], InvalidOperationException
    + FullyQualifiedErrorId : CannotAppendCsvWithMismatchedPropertyNames,Microsoft.PowerShell.Commands.ExportCsvCommand
export-csv : Cannot append CSV content to the following file: C:\sam.csv. The appended object does not have a property that corresponds to the following column: Length. To continue with mismatched properties, add
the -Force parameter, and then retry the command.
At line:6 char:11
+ $myhash | export-csv -path "C:\sam.csv" -Append
+           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidData: (Length:String) [Export-Csv], InvalidOperationException
    + FullyQualifiedErrorId : CannotAppendCsvWithMismatchedPropertyNames,Microsoft.PowerShell.Commands.ExportCsvCommand

>> TerminatingError(Export-Csv): "Cannot append CSV content to the following file: C:\sam.csv. The appended object does not have a property that corresponds to the following column: Length. To continue with mismatched properties, add the -Force parameter, and then retry the command."
export-csv : Cannot append CSV content to the following file: C:\sam.csv. The appended object does not have a property 
that corresponds to the following column: Length. To continue with mismatched properties, add the -Force parameter, and 
then retry the command.
At line:6 char:11
+ $myhash | export-csv -path "C:\sam.csv" -Append
+           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidData: (Length:String) [Export-Csv], InvalidOperationException
    + FullyQualifiedErrorId : CannotAppendCsvWithMismatchedPropertyNames,Microsoft.PowerShell.Commands.ExportCsvCommand
export-csv : Cannot append CSV content to the following file: C:\sam.csv. The appended object does not have a property that corresponds to the following column: Length. To continue with mismatched properties, add
the -Force parameter, and then retry the command.
At line:6 char:11
+ $myhash | export-csv -path "C:\sam.csv" -Append
+           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidData: (Length:String) [Export-Csv], InvalidOperationException
    + FullyQualifiedErrorId : CannotAppendCsvWithMismatchedPropertyNames,Microsoft.PowerShell.Commands.ExportCsvCommand

>> TerminatingError(Export-Csv): "Cannot append CSV content to the following file: C:\sam.csv. The appended object does not have a property that corresponds to the following column: Length. To continue with mismatched properties, add the -Force parameter, and then retry the command."
export-csv : Cannot append CSV content to the following file: C:\sam.csv. The appended object does not have a property 
that corresponds to the following column: Length. To continue with mismatched properties, add the -Force parameter, and 
then retry the command.
At line:6 char:11
+ $myhash | export-csv -path "C:\sam.csv" -Append
+           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidData: (Length:String) [Export-Csv], InvalidOperationException
    + FullyQualifiedErrorId : CannotAppendCsvWithMismatchedPropertyNames,Microsoft.PowerShell.Commands.ExportCsvCommand
export-csv : Cannot append CSV content to the following file: C:\sam.csv. The appended object does not have a property that corresponds to the following column: Length. To continue with mismatched properties, add
the -Force parameter, and then retry the command.
At line:6 char:11
+ $myhash | export-csv -path "C:\sam.csv" -Append
+           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidData: (Length:String) [Export-Csv], InvalidOperationException
    + FullyQualifiedErrorId : CannotAppendCsvWithMismatchedPropertyNames,Microsoft.PowerShell.Commands.ExportCsvCommand

PS C:\Windows\system32> foreach($user in $mycsv)
{

$samname="$($($user.firstname).chars(0))$($user.lastname)"
$myhash=[pscustomobject]@{fname=$user.firstname;lname=$user.lastname;samaccountname=$samname}
$myhash | export-csv -Force -path "C:\sam.csv" -Append
}
PS C:\Windows\system32> foreach($user in $mycsv)
{

$samname="$($($user.firstname).chars(0))$($user.lastname)"
$myhash=[pscustomobject]@{fname=$user.firstname;lname=$user.lastname;samaccountname=$samname}
$myhash | export-csv -Force -path "C:\sam.csv"
}
PS C:\Windows\system32> foreach($user in $mycsv)
{

$samname="$($($user.firstname).chars(0))$($user.lastname)"
$myhash=[pscustomobject]@{fname=$user.firstname;lname=$user.lastname;samaccountname=$samname}
$myhash | export-csv -path "C:\sam.csv" -NoTypeInformation
}
PS C:\Windows\system32> foreach($user in $mycsv)
{

$samname="$($($user.firstname).chars(0))$($user.lastname)"
$myhash=[pscustomobject]@{fname=$user.firstname;lname=$user.lastname;samaccountname=$samname}
$myhash | export-csv -path "C:\sam.csv" -NoTypeInformation -Append
}
PS C:\Windows\system32> foreach($user in $mycsv)
{

$samname="$($($user.firstname).chars(0))$($user.lastname)"
$myhash=[pscustomobject]@{fname=$user.firstname;lname=$user.lastname;samaccountname=$samname}
$myhash | export-csv -path "C:\sam.csv" -NoTypeInformation -Append
}
PS C:\Windows\system32> $samaccountname= import-csv -path "C:\samaccmailbox.csv"
PS C:\Windows\system32> class users
{
finame
seconame
mailaddress
}
At line:3 char:7
+ finame
+       ~
Missing '(' in class method parameter list.

At line:3 char:7
+ finame
+       ~
Missing function body in function declaration.
    + CategoryInfo          : ParserError: (:) [], ParentContainsErrorRecordException
    + FullyQualifiedErrorId : MissingMethodParameterList

PS C:\Windows\system32> class users
{
finame="Prathamesh"
seconame "Patkar"
mailaddress="Prathamesh.patkar@gmail.com"
}
At line:3 char:7
+ finame="Prathamesh"
+       ~
Missing '(' in class method parameter list.

At line:3 char:7
+ finame="Prathamesh"
+       ~
Missing function body in function declaration.
    + CategoryInfo          : ParserError: (:) [], ParentContainsErrorRecordException
    + FullyQualifiedErrorId : MissingMethodParameterList

PS C:\Windows\system32> class users
{
$finame="Prathamesh"
$seconame ="Patkar"
$mailaddress="Prathamesh.patkar@gmail.com"
}
PS C:\Windows\system32> class users
{
$finame
$seconame
$mailaddress
}
PS C:\Windows\system32> $myvar= New-Object -TypeName users
PS C:\Windows\system32> $myvar

finame seconame mailaddress
------ -------- -----------



PS C:\Windows\system32> $myvar.finame="Prathamesh"
$myvar.seconame="Patkar"
$myvar.mailaddress="prathamesh.patkar@gmail.com"
PS C:\Windows\system32> $myvar

finame     seconame mailaddress
------     -------- -----------
Prathamesh Patkar   prathamesh.patkar@gmail.com


PS C:\Windows\system32> TerminatingError(Get-Command): "The specified wildcard character pattern is not valid: ^[a-*"
PS C:\Windows\system32> class myvm
{
$vmname
}
PS C:\Windows\system32> $myvar1.vmname="mum-win-srv01"
The property 'vmname' cannot be found on this object. Verify that the property exists and can be set.
At line:1 char:1
+ $myvar1.vmname="mum-win-srv01"
+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidOperation: (:) [], RuntimeException
    + FullyQualifiedErrorId : PropertyNotFound
The property 'vmname' cannot be found on this object. Verify that the property exists and can be set.
At line:1 char:1
+ $myvar1.vmname="mum-win-srv01"
+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidOperation: (:) [], RuntimeException
    + FullyQualifiedErrorId : PropertyNotFound

PS C:\Windows\system32> $myvar1= New-Object -TypeName myvm
$myvar1.vmname -match [validatepattern]("^[a-z]{3}[-][a-z]{3}[-]srv[0-9]{2}")
False
PS C:\Windows\system32> $myvar1= New-Object -TypeName myvm
PS C:\Windows\system32> $myvar1.vmname="mum-win-srv01"
PS C:\Windows\system32> $myvar1.vmname
mum-win-srv01
PS C:\Windows\system32> $myvar1.vmname="mum-12-srv01"
PS C:\Windows\system32> $myvar1.vmname
mum-12-srv01
PS C:\Windows\system32> class myvm
{
validatepattern("^(mum|del|blr)-(win|lin|unix)-(srv\d\d\d?)")
$vmname
}
At line:3 char:17
+ validatepattern("^(mum|del|blr)-(win|lin|unix)-(srv\d\d\d?)")
+                 ~
Missing ')' in function parameter list.
    + CategoryInfo          : ParserError: (:) [], ParentContainsErrorRecordException
    + FullyQualifiedErrorId : MissingEndParenthesisInFunctionParameterList

PS C:\Windows\system32> class myvm
{
 [ValidatePattern("^(mum|del|blr)-(win|lin|unix)-(srv[0-9][0-9])$")]
    
$vmname
}
PS C:\Windows\system32> $myvar1= New-Object -TypeName myvm
PS C:\Windows\system32> $myvar1.vmname="mum-12-srv01"
Exception setting "vmname": "The argument "mum-12-srv01" does not match the 
"^(mum|del|blr)-(win|lin|unix)-(srv[0-9][0-9])$" pattern. Supply an argument that matches 
"^(mum|del|blr)-(win|lin|unix)-(srv[0-9][0-9])$" and try the command again."
At line:1 char:1
+ $myvar1.vmname="mum-12-srv01"
+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : NotSpecified: (:) [], SetValueInvocationException
    + FullyQualifiedErrorId : ExceptionWhenSetting
Exception setting "vmname": "The argument "mum-12-srv01" does not match the "^(mum|del|blr)-(win|lin|unix)-(srv[0-9][0-9])$" pattern. Supply an argument that matches
"^(mum|del|blr)-(win|lin|unix)-(srv[0-9][0-9])$" and try the command again."
At line:1 char:1
+ $myvar1.vmname="mum-12-srv01"
+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : NotSpecified: (:) [], SetValueInvocationException
    + FullyQualifiedErrorId : ExceptionWhenSetting

PS C:\Windows\system32> $myvar1.vmname="mum-win-srv01"
PS C:\Windows\system32> $myvar1.vmname
mum-win-srv01
PS C:\Windows\system32> $vmname
PS C:\Windows\system32> $myvar1.vmname="mum-win-srv01"
PS C:\Windows\system32> $vmname
PS C:\Windows\system32> $vmname
PS C:\Windows\system32> 
class myvm
{
 [ValidatePattern("^(mum|del|blr)-(win|lin|unix)-(srv[0-9][0-9])$")]
    
[string]$vmname
}
PS C:\Windows\system32> $myvar1= New-Object -TypeName myvm
PS C:\Windows\system32> $myvar1.vmname="mum-win-srv01"
PS C:\Windows\system32> $vmname
PS C:\Windows\system32> $vmname
PS C:\Windows\system32> $myvar1.vmname
mum-win-srv01
PS C:\Windows\system32> class new
{
 [ValidateSet(1024,2048,4096)]
    
[int]$ramcapacity
}
PS C:\Windows\system32> $myvar1= New-Object -TypeName new
PS C:\Windows\system32> $myvar1.ramcapacity=1024
PS C:\Windows\system32> $myvar1.ramcapacity=1023
Exception setting "ramcapacity": "The argument "1023" does not belong to the set "1024,2048,4096" specified by the 
ValidateSet attribute. Supply an argument that is in the set and then try the command again."
At line:1 char:1
+ $myvar1.ramcapacity=1023
+ ~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : NotSpecified: (:) [], SetValueInvocationException
    + FullyQualifiedErrorId : ExceptionWhenSetting
Exception setting "ramcapacity": "The argument "1023" does not belong to the set "1024,2048,4096" specified by the ValidateSet attribute. Supply an argument that is in the set and then try the command again."
At line:1 char:1
+ $myvar1.ramcapacity=1023
+ ~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : NotSpecified: (:) [], SetValueInvocationException
    + FullyQualifiedErrorId : ExceptionWhenSetting

PS C:\Windows\system32> class myusers
{

[string]$fn
[string]$ln

[string]emailaddress(){return "$this.fn $this.ln @gmail.com"}
sam() {return"$($($user.firstname).chars(0))$($user.lastname)"}
}
PS C:\Windows\system32> class myusers
{

[string]$fn
[string]$ln

[string]emailaddress(){return "$($this.fn).$($this.ln)@gmail.com"}
sam() {return"$($($this.firstname).chars(0))$($this.lastname)"}
}

PS C:\Windows\system32> class myusers
{

[string]$fn
[string]$ln

[string]emailaddress(){return "$($this.fn).$($this.ln)@gmail.com"}
sam() {return"$($($this.fn).chars(0))$($this.ln)"}
}

PS C:\Windows\system32> "1"|Get-Member


   TypeName: System.String

Name             MemberType            Definition
----             ----------            ----------
Clone            Method                System.Object Clone(), System.Object ICloneable.Clone()
CompareTo        Method                int CompareTo(System.Object value), int CompareTo(string strB), int IComparable.CompareTo(System.Object obj), int IComparable[string].CompareTo(string other)
Contains         Method                bool Contains(string value)
CopyTo           Method                void CopyTo(int sourceIndex, char[] destination, int destinationIndex, int count)
EndsWith         Method                bool EndsWith(string value), bool EndsWith(string value, System.StringComparison comparisonType), bool EndsWith(string value, bool ignoreCase, cultureinfo culture)
Equals           Method                bool Equals(System.Object obj), bool Equals(string value), bool Equals(string value, System.StringComparison comparisonType), bool IEquatable[string].Equals(string other)
GetEnumerator    Method                System.CharEnumerator GetEnumerator(), System.Collections.IEnumerator IEnumerable.GetEnumerator(), System.Collections.Generic.IEnumerator[char] IEnumerable[char].GetEnumer...
GetHashCode      Method                int GetHashCode()
GetType          Method                type GetType()
GetTypeCode      Method                System.TypeCode GetTypeCode(), System.TypeCode IConvertible.GetTypeCode()
IndexOf          Method                int IndexOf(char value), int IndexOf(char value, int startIndex), int IndexOf(char value, int startIndex, int count), int IndexOf(string value), int IndexOf(string value, ...
IndexOfAny       Method                int IndexOfAny(char[] anyOf), int IndexOfAny(char[] anyOf, int startIndex), int IndexOfAny(char[] anyOf, int startIndex, int count)
Insert           Method                string Insert(int startIndex, string value)
IsNormalized     Method                bool IsNormalized(), bool IsNormalized(System.Text.NormalizationForm normalizationForm)
LastIndexOf      Method                int LastIndexOf(char value), int LastIndexOf(char value, int startIndex), int LastIndexOf(char value, int startIndex, int count), int LastIndexOf(string value), int LastIn...
LastIndexOfAny   Method                int LastIndexOfAny(char[] anyOf), int LastIndexOfAny(char[] anyOf, int startIndex), int LastIndexOfAny(char[] anyOf, int startIndex, int count)
Normalize        Method                string Normalize(), string Normalize(System.Text.NormalizationForm normalizationForm)
PadLeft          Method                string PadLeft(int totalWidth), string PadLeft(int totalWidth, char paddingChar)
PadRight         Method                string PadRight(int totalWidth), string PadRight(int totalWidth, char paddingChar)
Remove           Method                string Remove(int startIndex, int count), string Remove(int startIndex)
Replace          Method                string Replace(char oldChar, char newChar), string Replace(string oldValue, string newValue)
Split            Method                string[] Split(Params char[] separator), string[] Split(char[] separator, int count), string[] Split(char[] separator, System.StringSplitOptions options), string[] Split(c...
StartsWith       Method                bool StartsWith(string value), bool StartsWith(string value, System.StringComparison comparisonType), bool StartsWith(string value, bool ignoreCase, cultureinfo culture)
Substring        Method                string Substring(int startIndex), string Substring(int startIndex, int length)
ToBoolean        Method                bool IConvertible.ToBoolean(System.IFormatProvider provider)
ToByte           Method                byte IConvertible.ToByte(System.IFormatProvider provider)
ToChar           Method                char IConvertible.ToChar(System.IFormatProvider provider)
ToCharArray      Method                char[] ToCharArray(), char[] ToCharArray(int startIndex, int length)
ToDateTime       Method                datetime IConvertible.ToDateTime(System.IFormatProvider provider)
ToDecimal        Method                decimal IConvertible.ToDecimal(System.IFormatProvider provider)
ToDouble         Method                double IConvertible.ToDouble(System.IFormatProvider provider)
ToInt16          Method                int16 IConvertible.ToInt16(System.IFormatProvider provider)
ToInt32          Method                int IConvertible.ToInt32(System.IFormatProvider provider)
ToInt64          Method                long IConvertible.ToInt64(System.IFormatProvider provider)
ToLower          Method                string ToLower(), string ToLower(cultureinfo culture)
ToLowerInvariant Method                string ToLowerInvariant()
ToSByte          Method                sbyte IConvertible.ToSByte(System.IFormatProvider provider)
ToSingle         Method                float IConvertible.ToSingle(System.IFormatProvider provider)
ToString         Method                string ToString(), string ToString(System.IFormatProvider provider), string IConvertible.ToString(System.IFormatProvider provider)
ToType           Method                System.Object IConvertible.ToType(type conversionType, System.IFormatProvider provider)
ToUInt16         Method                uint16 IConvertible.ToUInt16(System.IFormatProvider provider)
ToUInt32         Method                uint32 IConvertible.ToUInt32(System.IFormatProvider provider)
ToUInt64         Method                uint64 IConvertible.ToUInt64(System.IFormatProvider provider)
ToUpper          Method                string ToUpper(), string ToUpper(cultureinfo culture)
ToUpperInvariant Method                string ToUpperInvariant()
Trim             Method                string Trim(Params char[] trimChars), string Trim()
TrimEnd          Method                string TrimEnd(Params char[] trimChars)
TrimStart        Method                string TrimStart(Params char[] trimChars)
Chars            ParameterizedProperty char Chars(int index) {get;}
Length           Property              int Length {get;}


PS C:\Windows\system32> class myusers
{

[string]$fn
[string]$ln

[string]emailaddress(){return "$($this.fn).$($this.ln)@gmail.com"}
sam() {return"$($($this.fn).chars(0))$($this.ln)"}
}
PS C:\Windows\system32> $myu= New-Object -TypeName myusers
PS C:\Windows\system32> $myu.fn="Prathamesh"
$myu.ln="Patkar"
PS C:\Windows\system32> $myu.fn
Prathamesh
PS C:\Windows\system32> $myu.ln
Patkar
PS C:\Windows\system32> $myu

fn         ln
--         --
Prathamesh Patkar


PS C:\Windows\system32> $myu | Get-Member


   TypeName: myusers

Name         MemberType Definition
----         ---------- ----------
emailaddress Method     string emailaddress()
Equals       Method     bool Equals(System.Object obj)
GetHashCode  Method     int GetHashCode()
GetType      Method     type GetType()
sam          Method     void sam()
ToString     Method     string ToString()
fn           Property   string fn {get;set;}
ln           Property   string ln {get;set;}


PS C:\Windows\system32> $myu.emailaddress($fn,$ln)
Cannot find an overload for "emailaddress" and the argument count: "2".
At line:1 char:1
+ $myu.emailaddress($fn,$ln)
+ ~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : NotSpecified: (:) [], MethodException
    + FullyQualifiedErrorId : MethodCountCouldNotFindBest
Cannot find an overload for "emailaddress" and the argument count: "2".
At line:1 char:1
+ $myu.emailaddress($fn,$ln)
+ ~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : NotSpecified: (:) [], MethodException
    + FullyQualifiedErrorId : MethodCountCouldNotFindBest

PS C:\Windows\system32> $myu.emailaddress("$fn","$ln")
Cannot find an overload for "emailaddress" and the argument count: "2".
At line:1 char:1
+ $myu.emailaddress("$fn","$ln")
+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : NotSpecified: (:) [], MethodException
    + FullyQualifiedErrorId : MethodCountCouldNotFindBest
Cannot find an overload for "emailaddress" and the argument count: "2".
At line:1 char:1
+ $myu.emailaddress("$fn","$ln")
+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : NotSpecified: (:) [], MethodException
    + FullyQualifiedErrorId : MethodCountCouldNotFindBest

PS C:\Windows\system32> $myu.emailaddress()
Prathamesh.Patkar@gmail.com
PS C:\Windows\system32> Stop-Transcript
**********************
Windows PowerShell transcript end
End time: 20190330162350
**********************
